# Endpoints da API REST - Projeto TDAH Dev Helper

## Visão Geral

A API REST do backend Laravel será organizada em módulos que correspondem às principais funcionalidades do sistema. Todos os endpoints seguirão as melhores práticas RESTful e retornarão respostas JSON padronizadas.

## Autenticação e Autorização

Todos os endpoints (exceto login e registro) exigirão autenticação via Laravel Sanctum (token JWT).

### Endpoints de Autenticação

```
POST /api/auth/register
POST /api/auth/login
POST /api/auth/logout
GET /api/auth/user
PUT /api/auth/user
```

## Módulos e Endpoints

### 1. Módulo de Usuários

#### Gerenciamento de Usuários

```
GET /api/users
GET /api/users/{id}
PUT /api/users/{id}
DELETE /api/users/{id}
```

#### Preferências de Usuário

```
GET /api/users/{id}/preferences
PUT /api/users/{id}/preferences
```

### 2. Módulo de Tarefas

#### Gerenciamento de Tarefas

```
GET /api/tasks
POST /api/tasks
GET /api/tasks/{id}
PUT /api/tasks/{id}
DELETE /api/tasks/{id}
```

#### Importação de Tarefas do Jira

```
POST /api/tasks/import-from-jira
GET /api/tasks/jira-sync-status
```

#### Decomposição de Tarefas em Microtarefas

```
POST /api/tasks/{id}/decompose
```

Exemplo de implementação:
```php
Route::post('/tasks/{id}/decompose', function (Request $request, $id) {
    $task = Task::findOrFail($id);
    
    $result = OpenAI::chat()->create([
        'model' => 'gpt-4o',
        'messages' => [[
            'role' => 'user',
            'content' => "Quebre esta task em subtarefas de 15min: {$task->description}"
        ]]
    ]);
    
    $subtasks = json_decode($result->choices[0]->message->content);
    
    // Salvar subtarefas no banco de dados
    foreach ($subtasks as $index => $subtaskDescription) {
        Subtask::create([
            'task_id' => $task->id,
            'description' => $subtaskDescription,
            'duration' => 15,
            'order_position' => $index + 1
        ]);
    }
    
    return response()->json([
        'success' => true,
        'subtasks' => $task->subtasks()->orderBy('order_position')->get()
    ]);
});
```

### 3. Módulo de Microtarefas

```
GET /api/tasks/{taskId}/subtasks
POST /api/tasks/{taskId}/subtasks
GET /api/subtasks/{id}
PUT /api/subtasks/{id}
DELETE /api/subtasks/{id}
PUT /api/subtasks/{id}/complete
PUT /api/subtasks/{id}/reorder
```

### 4. Módulo de Gamificação

#### Gerenciamento de XP e Níveis

```
GET /api/users/{id}/xp
POST /api/users/{id}/xp/add
GET /api/users/{id}/level
```

#### Recompensas

```
GET /api/rewards
GET /api/rewards/{id}
GET /api/users/{id}/rewards
POST /api/users/{id}/rewards/{rewardId}/unlock
```

### 5. Módulo de Produtividade

#### Métricas de Produtividade

```
GET /api/users/{id}/productivity
GET /api/users/{id}/productivity/daily
GET /api/users/{id}/productivity/weekly
GET /api/users/{id}/productivity/monthly
```

#### Análise de Horários Produtivos

```
GET /api/users/{id}/productivity/peak-hours
```

#### Relatórios para Tech Leads

```
GET /api/teams/{teamId}/productivity
GET /api/teams/{teamId}/productivity/comparison
```

### 6. Módulo de Integrações

#### Jira

```
POST /api/integrations/jira/connect
GET /api/integrations/jira/projects
GET /api/integrations/jira/issues
```

#### GitHub/GitLab

```
POST /api/integrations/github/connect
POST /api/integrations/gitlab/connect
GET /api/integrations/git/repositories
GET /api/integrations/git/commits
```

#### Smartwatch

```
POST /api/integrations/smartwatch/connect
POST /api/integrations/smartwatch/notify
```

### 7. Módulo de Priorização de Tasks

```
POST /api/tasks/prioritize
GET /api/tasks/schedule
PUT /api/tasks/schedule/reorder
```

Exemplo de implementação:
```php
Route::post('/tasks/prioritize', function (Request $request) {
    $user = Auth::user();
    
    // Obter dados do Git
    $gitService = new GitAnalysisService();
    $commitHistory = $gitService->getUserCommitHistory($user->id);
    
    // Obter dados do Jira
    $jiraService = new JiraIntegrationService();
    $jiraTasks = $jiraService->getUserTasks($user->id);
    
    // Obter métricas de produtividade
    $productivityService = new ProductivityService();
    $peakHours = $productivityService->getUserPeakHours($user->id);
    
    // Executar algoritmo de Monte Carlo
    $prioritizationService = new TaskPrioritizationService();
    $schedule = $prioritizationService->generateSchedule(
        $jiraTasks,
        $commitHistory,
        $peakHours
    );
    
    return response()->json([
        'success' => true,
        'schedule' => $schedule
    ]);
});
```

### 8. Módulo da Extensão VS Code

```
POST /api/vscode/context-update
GET /api/vscode/hyperfocus-settings
POST /api/vscode/activity-log
GET /api/vscode/user-tasks
```

## Detalhamento dos Principais Endpoints

### Decomposição de Tarefas

**Endpoint:** `POST /api/tasks/{id}/decompose`

**Descrição:** Decompõe uma tarefa em microtarefas de 15 minutos usando a API do OpenAI.

**Parâmetros:**
- `id` (path): ID da tarefa a ser decomposta

**Resposta:**
```json
{
  "success": true,
  "subtasks": [
    {
      "id": 1,
      "task_id": 123,
      "description": "Configurar ambiente de desenvolvimento",
      "duration": 15,
      "completed": false,
      "order_position": 1
    },
    {
      "id": 2,
      "task_id": 123,
      "description": "Criar estrutura básica do componente",
      "duration": 15,
      "completed": false,
      "order_position": 2
    }
  ]
}
```

### Ativação do Modo Hiperfoco

**Endpoint:** `GET /api/vscode/hyperfocus-settings`

**Descrição:** Retorna as configurações de hiperfoco para o usuário atual.

**Resposta:**
```json
{
  "enabled": true,
  "triggers": {
    "file_complexity_threshold": 500,
    "peak_hours": [
      {"start": "09:00", "end": "11:30"},
      {"start": "14:00", "end": "16:30"}
    ]
  },
  "actions": {
    "block_notifications": true,
    "theme": "focus-dark",
    "hide_sidebar": true
  }
}
```

### Adição de XP

**Endpoint:** `POST /api/users/{id}/xp/add`

**Descrição:** Adiciona pontos de experiência ao usuário e verifica se houve evolução de nível.

**Parâmetros:**
- `id` (path): ID do usuário
- `amount` (body): Quantidade de XP a adicionar
- `source` (body): Fonte da XP (ex: "task_completed", "commit_pushed")

**Resposta:**
```json
{
  "success": true,
  "user": {
    "id": 1,
    "name": "João Silva",
    "xp_points": 520,
    "level": 5,
    "level_up": true,
    "new_rewards": [
      {
        "id": 3,
        "name": "Acesso Beta Features",
        "description": "Acesso antecipado a recursos beta"
      }
    ]
  }
}
```

### Priorização de Tasks

**Endpoint:** `POST /api/tasks/prioritize`

**Descrição:** Gera um cronograma priorizado de tarefas com base em dados do Git, Jira e métricas de produtividade.

**Parâmetros:**
- `date` (body, opcional): Data para a qual gerar o cronograma (padrão: data atual)

**Resposta:**
```json
{
  "success": true,
  "schedule": {
    "date": "2025-05-19",
    "tasks": [
      {
        "id": 123,
        "title": "Implementar autenticação",
        "priority": "high",
        "estimated_time": 120,
        "predicted_time": 145,
        "confidence": 0.85,
        "suggested_time_slot": {
          "start": "09:00",
          "end": "11:00"
        }
      },
      {
        "id": 124,
        "title": "Corrigir bug na interface",
        "priority": "medium",
        "estimated_time": 45,
        "predicted_time": 30,
        "confidence": 0.92,
        "suggested_time_slot": {
          "start": "14:00",
          "end": "14:30"
        }
      }
    ]
  }
}
```

### Relatório de Produtividade para Tech Leads

**Endpoint:** `GET /api/teams/{teamId}/productivity`

**Descrição:** Retorna métricas de produtividade para toda a equipe.

**Parâmetros:**
- `teamId` (path): ID da equipe
- `period` (query): Período de análise (daily, weekly, monthly)

**Resposta:**
```json
{
  "success": true,
  "team": {
    "id": 5,
    "name": "Squad Alpha"
  },
  "period": "weekly",
  "start_date": "2025-05-12",
  "end_date": "2025-05-18",
  "metrics": {
    "tasks_completed": 47,
    "average_completion_time": 3.2,
    "commits": 156,
    "focus_time_hours": 187.5
  },
  "members": [
    {
      "id": 1,
      "name": "João Silva",
      "tasks_completed": 12,
      "focus_time_hours": 38.5,
      "productivity_trend": "increasing"
    },
    {
      "id": 2,
      "name": "Maria Oliveira",
      "tasks_completed": 15,
      "focus_time_hours": 42.3,
      "productivity_trend": "stable"
    }
  ]
}
```

## Considerações Técnicas

### Performance

- Todos os endpoints devem responder em menos de 500ms
- Implementação de cache para endpoints frequentemente acessados
- Paginação para endpoints que retornam grandes conjuntos de dados

### Segurança

- Autenticação via Laravel Sanctum (JWT)
- Validação rigorosa de todas as entradas
- Proteção contra CSRF, XSS e SQL Injection
- Rate limiting para prevenir abusos

### Versionamento

- Prefixo de versão na URL (ex: `/api/v1/tasks`)
- Suporte a múltiplas versões para compatibilidade

### Documentação

- Documentação automática via Swagger/OpenAPI
- Exemplos de requisição e resposta para cada endpoint
- Descrição detalhada de parâmetros e códigos de erro

## Implementação Laravel

### Estrutura de Controllers

```
app/
  Http/
    Controllers/
      Api/
        AuthController.php
        TaskController.php
        SubtaskController.php
        UserController.php
        GamificationController.php
        ProductivityController.php
        IntegrationController.php
        VSCodeController.php
```

### Exemplo de Controller

```php
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Task;
use App\Services\OpenAIService;
use Illuminate\Http\Request;

class TaskController extends Controller
{
    protected $openAIService;
    
    public function __construct(OpenAIService $openAIService)
    {
        $this->openAIService = $openAIService;
    }
    
    public function decompose(Request $request, $id)
    {
        $task = Task::findOrFail($id);
        
        $subtasks = $this->openAIService->decomposeTask($task->description);
        
        // Salvar subtarefas no banco de dados
        $savedSubtasks = [];
        foreach ($subtasks as $index => $subtaskDescription) {
            $savedSubtasks[] = $task->subtasks()->create([
                'description' => $subtaskDescription,
                'duration' => 15,
                'order_position' => $index + 1
            ]);
        }
        
        return response()->json([
            'success' => true,
            'subtasks' => $savedSubtasks
        ]);
    }
}
```

### Middlewares Personalizados

```php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class TrackProductivity
{
    public function handle(Request $request, Closure $next)
    {
        $response = $next($request);
        
        // Registrar atividade para métricas de produtividade
        if (auth()->check()) {
            activity()
                ->causedBy(auth()->user())
                ->log('api_request');
        }
        
        return $response;
    }
}
```

### Otimização com Laravel Octane

Para garantir a latência abaixo de 500ms, o Laravel Octane será configurado com Swoole:

```php
// config/octane.php
return [
    'server' => 'swoole',
    'https' => false,
    'listeners' => [
        'task' => [
            \App\Listeners\TaskEventSubscriber::class,
        ],
    ],
    'cache' => [
        'rows' => 1000,
    ],
];
```
