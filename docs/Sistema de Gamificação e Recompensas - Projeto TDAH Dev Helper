# Sistema de Gamifica√ß√£o e Recompensas - Projeto TDAH Dev Helper

## Vis√£o Geral

O sistema de gamifica√ß√£o √© um componente central do projeto, projetado para aumentar o engajamento e motiva√ß√£o de desenvolvedores com TDAH. Utilizando elementos de jogos como pontos de experi√™ncia (XP), n√≠veis, recompensas tang√≠veis e visualiza√ß√£o de progresso estilo RPG, o sistema transforma tarefas de desenvolvimento em uma experi√™ncia mais envolvente e gratificante.

## Princ√≠pios de Design para TDAH

O sistema de gamifica√ß√£o foi projetado considerando as caracter√≠sticas espec√≠ficas de pessoas com TDAH:

1. **Feedback Imediato**: Recompensas instant√¢neas para a√ß√µes positivas
2. **Visualiza√ß√£o Clara**: Representa√ß√µes visuais de progresso e conquistas
3. **Metas Alcan√ß√°veis**: Divis√£o em objetivos menores e mais gerenci√°veis
4. **Refor√ßo Positivo**: Celebra√ß√£o de conquistas para estimular dopamina
5. **Personaliza√ß√£o**: Adapta√ß√£o √†s prefer√™ncias e necessidades individuais

## Mec√¢nicas de XP e N√≠veis

### Sistema de XP

O sistema de XP (pontos de experi√™ncia) √© a base da gamifica√ß√£o, recompensando diversas atividades produtivas:

| Atividade | XP Base | Multiplicadores |
|-----------|---------|-----------------|
| Completar subtarefa (15min) | 10 XP | x1.5 durante hiperfoco |
| Completar tarefa inteira | 50 XP | x1.2 se antes do prazo |
| Commit com testes | 15 XP | x2 para cobertura >80% |
| Sess√£o de hiperfoco | 5 XP/15min | x1.3 em hor√°rio de pico |
| Resolver bug | 20 XP | x1.5 para bugs cr√≠ticos |
| Revisar c√≥digo | 15 XP | x1.2 para PRs grandes |
| Documentar c√≥digo | 10 XP | - |
| Streak di√°ria | 25 XP | +5 XP por dia consecutivo |

#### F√≥rmula de C√°lculo de XP

```
XP_Final = XP_Base * Multiplicador_Atividade * Multiplicador_Dificuldade * Multiplicador_Streak
```

Onde:
- **Multiplicador_Atividade**: Baseado no tipo de atividade (tabela acima)
- **Multiplicador_Dificuldade**: 1.0 (f√°cil), 1.2 (m√©dio), 1.5 (dif√≠cil)
- **Multiplicador_Streak**: 1.0 + (0.05 * dias_consecutivos) [m√°x: 1.5]

### Sistema de N√≠veis

Os n√≠veis representam o progresso do usu√°rio ao longo do tempo, com requisitos de XP crescentes:

| N√≠vel | XP Necess√°rio | XP Total | T√≠tulo |
|-------|---------------|----------|--------|
| 1 | 0 | 0 | Novato |
| 2 | 100 | 100 | Iniciante |
| 3 | 150 | 250 | Aprendiz |
| 4 | 200 | 450 | Desenvolvedor |
| 5 | 250 | 700 | Desenvolvedor Experiente |
| 6 | 300 | 1000 | Especialista |
| 7 | 350 | 1350 | Mestre |
| 8 | 400 | 1750 | Guru |
| 9 | 450 | 2200 | Lenda |
| 10 | 500 | 2700 | Arquiteto |
| 11+ | +100 por n√≠vel | - | Personalizado |

#### F√≥rmula de XP para N√≠vel

```
XP_Necess√°rio_Para_N√≠vel(n) = 100 + (n-2) * 50  [para n >= 2]
XP_Total_Para_N√≠vel(n) = Œ£ XP_Necess√°rio_Para_N√≠vel(i) [para i de 1 at√© n]
```

## Recompensas Tang√≠veis

As recompensas s√£o desbloqueadas ao atingir n√≠veis espec√≠ficos, oferecendo benef√≠cios reais e motivadores:

### Recompensas por N√≠vel

| N√≠vel | Recompensa | Descri√ß√£o |
|-------|------------|-----------|
| 1 | Tema Dark "Matrix" | Tema visual de alto contraste inspirado em Matrix |
| 2 | Badge "Focado" | Badge exclusivo para perfil |
| 3 | Extens√£o de Pomodoro Premium | Ferramenta de gerenciamento de tempo personalizada |
| 4 | Pacote de √çcones Personalizados | √çcones exclusivos para VS Code |
| 5 | Acesso Beta Features | Acesso antecipado a novos recursos |
| 6 | Tema Personalizado | Cria√ß√£o de tema personalizado com cores favoritas |
| 7 | Extens√£o de Produtividade Premium | Conjunto de ferramentas avan√ßadas |
| 8 | Mentoria T√©cnica (1h) | Sess√£o de mentoria com desenvolvedor s√™nior |
| 9 | Licen√ßa IDE Premium (1 ano) | Licen√ßa para IDE premium |
| 10 | Curso de Laravel Gr√°tis | Curso completo de Laravel |

### Recompensas Especiais

Al√©m das recompensas por n√≠vel, existem recompensas especiais por conquistas espec√≠ficas:

| Conquista | Recompensa | Requisito |
|-----------|------------|-----------|
| Mestre do Foco | Smartwatch Desconto 15% | 50 horas em modo hiperfoco |
| Testador Implac√°vel | Licen√ßa Testing Tool | 100 commits com testes |
| Maratonista de C√≥digo | Teclado Mec√¢nico Desconto 20% | 30 dias consecutivos de atividade |
| Domador de Bugs | Curso Debug Avan√ßado | Resolver 50 bugs |
| Rei da Produtividade | Consultoria Personalizada | Top 1% em m√©tricas de produtividade |

## Visualiza√ß√£o de Progresso Estilo RPG

### Barra de HP para Tarefas

A visualiza√ß√£o principal de progresso utiliza uma met√°fora de RPG, onde cada tarefa √© representada como um "inimigo" com uma barra de HP (Health Points):

- **HP Inicial**: 100% (tarefa n√£o iniciada)
- **Redu√ß√£o de HP**: Cada subtarefa conclu√≠da reduz o HP proporcionalmente
- **HP Final**: 0% (tarefa conclu√≠da)

```
Tarefa: Implementar Autentica√ß√£o [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100% HP
Subtarefa 1: Configurar rotas [Conclu√≠da]
Subtarefa 2: Criar modelo de usu√°rio [Conclu√≠da]
...

Tarefa: Implementar Autentica√ß√£o [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 50% HP
...

Tarefa: Implementar Autentica√ß√£o [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0% HP (Derrotado!)
```

### Elementos Visuais Adicionais

1. **Barra de XP**: Mostra progresso para o pr√≥ximo n√≠vel
   ```
   N√≠vel 4 [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë] 70% para N√≠vel 5
   ```

2. **Emblemas de Conquistas**: √çcones visuais para conquistas desbloqueadas
   ```
   üî• 7 dias consecutivos | üß™ 50 testes criados | ‚ö° 10h em hiperfoco
   ```

3. **Efeitos Visuais**: Anima√ß√µes para momentos importantes
   - Explos√£o de part√≠culas ao completar tarefa
   - Efeito de "level up" ao subir de n√≠vel
   - Brilho dourado em recompensas desbloqueadas

## Implementa√ß√£o no Frontend

### Dashboard de Gamifica√ß√£o

O dashboard principal exibir√°:

1. **Perfil do Usu√°rio**:
   - N√≠vel atual e XP
   - Progresso para pr√≥ximo n√≠vel
   - Emblemas e conquistas

2. **Tarefas Ativas**:
   - Barras de HP para cada tarefa
   - Subtarefas pendentes e conclu√≠das
   - Estimativa de XP a ganhar

3. **Hist√≥rico de Atividades**:
   - Timeline de XP ganho
   - Conquistas recentes
   - Estat√≠sticas de produtividade

### Componente React para Barra de HP

```jsx
// HPProgressBar.jsx
import React from 'react';
import { motion } from 'framer-motion';

const HPProgressBar = ({ task, subtasks }) => {
  // Calcular HP restante
  const totalSubtasks = subtasks.length;
  const completedSubtasks = subtasks.filter(s => s.completed).length;
  const hpPercentage = totalSubtasks > 0 
    ? Math.round(((totalSubtasks - completedSubtasks) / totalSubtasks) * 100) 
    : 100;
  
  // Determinar cor baseada no HP
  const getHPColor = (hp) => {
    if (hp > 70) return '#ff6b6b'; // Vermelho para HP alto
    if (hp > 30) return '#ffb347'; // Laranja para HP m√©dio
    return '#4cd137';              // Verde para HP baixo
  };
  
  return (
    <div className="task-hp-container">
      <div className="task-info">
        <h3>{task.title}</h3>
        <span className="hp-text">{hpPercentage}% HP</span>
      </div>
      
      <div className="hp-bar-container">
        <motion.div 
          className="hp-bar"
          initial={{ width: '100%' }}
          animate={{ width: `${hpPercentage}%` }}
          style={{ backgroundColor: getHPColor(hpPercentage) }}
          transition={{ duration: 0.5 }}
        />
      </div>
      
      {hpPercentage === 0 && (
        <motion.div 
          className="task-completed-effect"
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          Tarefa Conclu√≠da! +{task.xpReward} XP
        </motion.div>
      )}
    </div>
  );
};

export default HPProgressBar;
```

### Componente React para Ganho de XP

```jsx
// XPGainNotification.jsx
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const XPGainNotification = ({ xpGains = [] }) => {
  return (
    <div className="xp-notification-container">
      <AnimatePresence>
        {xpGains.map((gain, index) => (
          <motion.div
            key={`${gain.id}-${index}`}
            className="xp-notification"
            initial={{ opacity: 0, y: 50, x: 0 }}
            animate={{ opacity: 1, y: 0, x: 0 }}
            exit={{ opacity: 0, y: -50, x: 100 }}
            transition={{ duration: 0.5 }}
          >
            <span className="xp-amount">+{gain.amount} XP</span>
            <span className="xp-source">{gain.source}</span>
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
};

export default XPGainNotification;
```

## Implementa√ß√£o na Extens√£o VS Code

### Visualiza√ß√£o de Progresso na Extens√£o

1. **Status Bar**: Mostra n√≠vel atual e XP
   ```
   TDAH: Lvl 5 | 450/700 XP | Tarefa: Implementar Auth [50% HP]
   ```

2. **Webview para Tarefas**: Interface visual para gerenciar tarefas
   - Barra de HP para tarefa atual
   - Lista de subtarefas com checkboxes
   - Anima√ß√µes de progresso

3. **Notifica√ß√µes de XP**: Pop-ups sutis para ganho de XP
   ```
   +10 XP: Subtarefa conclu√≠da!
   ```

### C√≥digo da Extens√£o para Gamifica√ß√£o

```typescript
// gamification/xp.ts
export class XPManager {
    private apiClient: ApiClient;
    private statusBarItem: vscode.StatusBarItem;
    
    constructor(apiClient: ApiClient) {
        this.apiClient = apiClient;
        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
        this.statusBarItem.command = 'tdah-dev-helper.showXPDetails';
    }
    
    public initialize(): void {
        this.updateXPDisplay();
        this.statusBarItem.show();
        
        // Atualizar a cada 5 minutos
        setInterval(() => this.updateXPDisplay(), 5 * 60 * 1000);
    }
    
    public async awardXP(amount: number, source: string): Promise<void> {
        try {
            const result = await this.apiClient.addXP(amount, source);
            
            // Mostrar notifica√ß√£o de XP
            this.showXPNotification(amount, source);
            
            // Verificar se subiu de n√≠vel
            if (result.level_up) {
                this.showLevelUpNotification(result.new_level, result.new_rewards);
            }
            
            // Atualizar display
            this.updateXPDisplay();
        } catch (error) {
            console.error('Erro ao adicionar XP:', error);
        }
    }
    
    private async updateXPDisplay(): Promise<void> {
        try {
            const userData = await this.apiClient.getUserData();
            
            this.statusBarItem.text = `$(star) Lvl ${userData.level} | ${userData.xp_points}/${userData.xp_for_next_level} XP`;
            this.statusBarItem.tooltip = `N√≠vel ${userData.level}: ${userData.title}\nXP: ${userData.xp_points}/${userData.xp_for_next_level}\nPr√≥ximo n√≠vel: ${userData.xp_for_next_level - userData.xp_points} XP restantes`;
        } catch (error) {
            console.error('Erro ao atualizar display de XP:', error);
            this.statusBarItem.text = `$(star) XP`;
        }
    }
    
    private showXPNotification(amount: number, source: string): void {
        // Criar notifica√ß√£o com anima√ß√£o
        const panel = vscode.window.createWebviewPanel(
            'xpNotification',
            'XP Ganho',
            { viewColumn: vscode.ViewColumn.Beside, preserveFocus: true },
            { enableScripts: true, retainContextWhenHidden: false }
        );
        
        panel.webview.html = this.generateXPNotificationHTML(amount, source);
        
        // Fechar automaticamente ap√≥s 3 segundos
        setTimeout(() => panel.dispose(), 3000);
    }
    
    private showLevelUpNotification(newLevel: number, rewards: any[]): void {
        // Criar notifica√ß√£o de level up com anima√ß√£o
        const panel = vscode.window.createWebviewPanel(
            'levelUpNotification',
            'Novo N√≠vel!',
            vscode.ViewColumn.Beside,
            { enableScripts: true, retainContextWhenHidden: false }
        );
        
        panel.webview.html = this.generateLevelUpNotificationHTML(newLevel, rewards);
        
        // Mostrar mensagem no VS Code tamb√©m
        vscode.window.showInformationMessage(`üéâ Parab√©ns! Voc√™ alcan√ßou o N√≠vel ${newLevel}!`);
    }
    
    private generateXPNotificationHTML(amount: number, source: string): string {
        return `
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        margin: 0;
                        background-color: transparent;
                        color: var(--vscode-foreground);
                    }
                    .xp-container {
                        text-align: center;
                        animation: fadeInUp 0.5s ease-out, fadeOut 0.5s ease-in 2.5s;
                    }
                    .xp-amount {
                        font-size: 2.5em;
                        font-weight: bold;
                        color: #ffcc00;
                        text-shadow: 0 0 10px rgba(255, 204, 0, 0.7);
                    }
                    .xp-source {
                        font-size: 1.2em;
                        margin-top: 10px;
                    }
                    @keyframes fadeInUp {
                        from { opacity: 0; transform: translateY(20px); }
                        to { opacity: 1; transform: translateY(0); }
                    }
                    @keyframes fadeOut {
                        from { opacity: 1; }
                        to { opacity: 0; }
                    }
                </style>
            </head>
            <body>
                <div class="xp-container">
                    <div class="xp-amount">+${amount} XP</div>
                    <div class="xp-source">${source}</div>
                </div>
            </body>
            </html>
        `;
    }
    
    private generateLevelUpNotificationHTML(newLevel: number, rewards: any[]): string {
        const rewardsHTML = rewards.length > 0 
            ? `
                <div class="rewards-container">
                    <h3>Novas Recompensas:</h3>
                    <ul>
                        ${rewards.map(r => `<li>${r.name}: ${r.description}</li>`).join('')}
                    </ul>
                </div>
            ` 
            : '';
        
        return `
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        margin: 0;
                        background-color: transparent;
                        color: var(--vscode-foreground);
                    }
                    .levelup-container {
                        text-align: center;
                        animation: scaleIn 0.7s ease-out;
                        padding: 20px;
                        border-radius: 10px;
                        background: linear-gradient(135deg, rgba(50,50,50,0.9) 0%, rgba(30,30,30,0.9) 100%);
                        box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
                    }
                    .levelup-title {
                        font-size: 2em;
                        font-weight: bold;
                        color: #ffd700;
                        margin-bottom: 10px;
                    }
                    .level-number {
                        font-size: 3em;
                        font-weight: bold;
                        color: #ffd700;
                        text-shadow: 0 0 10px rgba(255, 215, 0, 0.7);
                        margin: 20px 0;
                    }
                    .rewards-container {
                        text-align: left;
                        margin-top: 20px;
                    }
                    .rewards-container h3 {
                        color: #ffd700;
                    }
                    .rewards-container ul {
                        padding-left: 20px;
                    }
                    .rewards-container li {
                        margin-bottom: 5px;
                    }
                    @keyframes scaleIn {
                        from { opacity: 0; transform: scale(0.5); }
                        to { opacity: 1; transform: scale(1); }
                    }
                </style>
            </head>
            <body>
                <div class="levelup-container">
                    <div class="levelup-title">LEVEL UP!</div>
                    <div class="level-number">N√≠vel ${newLevel}</div>
                    ${rewardsHTML}
                </div>
            </body>
            </html>
        `;
    }
}
```

## Implementa√ß√£o no Backend

### Servi√ßo de XP e N√≠veis

```php
<?php

namespace App\Services;

use App\Models\User;
use App\Models\Reward;
use App\Models\ActivityLog;
use App\Models\UserReward;

class GamificationService
{
    /**
     * Adiciona XP ao usu√°rio e verifica evolu√ß√£o de n√≠vel
     */
    public function addXP(User $user, int $amount, string $source, array $context = []): array
    {
        // Calcular multiplicadores
        $activityMultiplier = $this->getActivityMultiplier($source);
        $difficultyMultiplier = $context['difficulty'] ?? 1.0;
        $streakMultiplier = $this->getStreakMultiplier($user);
        
        // Calcular XP final
        $finalXP = (int) ($amount * $activityMultiplier * $difficultyMultiplier * $streakMultiplier);
        
        // Registrar log de atividade
        ActivityLog::create([
            'user_id' => $user->id,
            'task_id' => $context['task_id'] ?? null,
            'subtask_id' => $context['subtask_id'] ?? null,
            'action_type' => $source,
            'details' => json_encode($context),
            'xp_earned' => $finalXP
        ]);
        
        // N√≠vel anterior
        $oldLevel = $user->level;
        
        // Adicionar XP
        $user->xp_points += $finalXP;
        
        // Verificar evolu√ß√£o de n√≠vel
        $newLevel = $this->calculateLevel($user->xp_points);
        $user->level = $newLevel;
        $user->save();
        
        // Verificar novas recompensas
        $newRewards = [];
        if ($newLevel > $oldLevel) {
            $newRewards = $this->unlockLevelRewards($user, $oldLevel, $newLevel);
        }
        
        return [
            'xp_earned' => $finalXP,
            'total_xp' => $user->xp_points,
            'old_level' => $oldLevel,
            'new_level' => $newLevel,
            'level_up' => $newLevel > $oldLevel,
            'new_rewards' => $newRewards,
            'next_level_xp' => $this->getXPForNextLevel($newLevel)
        ];
    }
    
    /**
     * Calcula o n√≠vel com base no XP total
     */
    public function calculateLevel(int $xpPoints): int
    {
        if ($xpPoints < 100) {
            return 1;
        }
        
        $level = 1;
        $xpRequired = 0;
        
        while (true) {
            $nextLevelXP = $this->getXPForLevel($level + 1);
            if ($xpRequired + $nextLevelXP > $xpPoints) {
                break;
            }
            
            $xpRequired += $nextLevelXP;
            $level++;
        }
        
        return $level;
    }
    
    /**
     * Retorna o XP necess√°rio para um n√≠vel espec√≠fico
     */
    public function getXPForLevel(int $level): int
    {
        if ($level <= 1) {
            return 0;
        }
        
        return 100 + ($level - 2) * 50;
    }
    
    /**
     * Retorna o XP necess√°rio para o pr√≥ximo n√≠vel
     */
    public function getXPForNextLevel(int $currentLevel): int
    {
        return $this->getXPForLevel($currentLevel + 1);
    }
    
    /**
     * Desbloqueia recompensas para os n√≠veis alcan√ßados
     */
    public function unlockLevelRewards(User $user, int $oldLevel, int $newLevel): array
    {
        $rewards = Reward::whereBetween('level_required', [$oldLevel + 1, $newLevel])->get();
        $unlockedRewards = [];
        
        foreach ($rewards as $reward) {
            // Verificar se j√° possui a recompensa
            $exists = UserReward::where('user_id', $user->id)
                ->where('reward_id', $reward->id)
                ->exists();
                
            if (!$exists) {
                // Desbloquear recompensa
                UserReward::create([
                    'user_id' => $user->id,
                    'reward_id' => $reward->id,
                    'unlocked_at' => now()
                ]);
                
                $unlockedRewards[] = [
                    'id' => $reward->id,
                    'name' => $reward->name,
                    'description' => $reward->description,
                    'type' => $reward->type,
                    'content' => json_decode($reward->content)
                ];
            }
        }
        
        return $unlockedRewards;
    }
    
    /**
     * Retorna o multiplicador baseado no tipo de atividade
     */
    private function getActivityMultiplier(string $activityType): float
    {
        $multipliers = [
            'subtask_completed' => 1.0,
            'task_completed' => 1.0,
            'commit_with_tests' => 1.0,
            'focus_session' => 1.0,
            'bug_fixed' => 1.0,
            'code_review' => 1.0,
            'documentation' => 1.0
        ];
        
        return $multipliers[$activityType] ?? 1.0;
    }
    
    /**
     * Calcula multiplicador baseado na streak do usu√°rio
     */
    private function getStreakMultiplier(User $user): float
    {
        // Obter dias consecutivos de atividade
        $consecutiveDays = $this->calculateConsecutiveDays($user->id);
        
        // Calcular multiplicador (m√°ximo 1.5)
        $multiplier = 1.0 + (0.05 * $consecutiveDays);
        return min(1.5, $multiplier);
    }
    
    /**
     * Calcula dias consecutivos de atividade
     */
    private function calculateConsecutiveDays(int $userId): int
    {
        $logs = ActivityLog::where('user_id', $userId)
            ->selectRaw('DATE(created_at) as activity_date')
            ->distinct()
            ->orderBy('activity_date', 'desc')
            ->get();
            
        if ($logs->isEmpty()) {
            return 0;
        }
        
        $consecutiveDays = 1;
        $lastDate = strtotime($logs[0]->activity_date);
        
        for ($i = 1; $i < count($logs); $i++) {
            $currentDate = strtotime($logs[$i]->activity_date);
            $dayDiff = ($lastDate - $currentDate) / (60 * 60 * 24);
            
            if ($dayDiff == 1) {
                $consecutiveDays++;
                $lastDate = $currentDate;
            } else {
                break;
            }
        }
        
        return $consecutiveDays;
    }
}
```

### Controller para Gamifica√ß√£o

```php
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Services\GamificationService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class GamificationController extends Controller
{
    protected $gamificationService;
    
    public function __construct(GamificationService $gamificationService)
    {
        $this->gamificationService = $gamificationService;
    }
    
    /**
     * Adiciona XP ao usu√°rio
     */
    public function addXP(Request $request, $id)
    {
        $request->validate([
            'amount' => 'required|integer|min:1',
            'source' => 'required|string',
            'context' => 'nullable|array'
        ]);
        
        $user = Auth::user();
        
        // Verificar permiss√£o (apenas o pr√≥prio usu√°rio ou admin)
        if ($user->id != $id && !$user->isAdmin()) {
            return response()->json([
                'success' => false,
                'message' => 'N√£o autorizado'
            ], 403);
        }
        
        $result = $this->gamificationService->addXP(
            $user,
            $request->amount,
            $request->source,
            $request->context ?? []
        );
        
        return response()->json([
            'success' => true,
            'data' => $result
        ]);
    }
    
    /**
     * Retorna informa√ß√µes de XP e n√≠vel do usu√°rio
     */
    public function getUserXP($id)
    {
        $user = Auth::user();
        
        // Verificar permiss√£o
        if ($user->id != $id && !$user->isAdmin()) {
            return response()->json([
                'success' => false,
                'message' => 'N√£o autorizado'
            ], 403);
        }
        
        $nextLevelXP = $this->gamificationService->getXPForNextLevel($user->level);
        $currentLevelXP = $this->gamificationService->getXPForLevel($user->level);
        
        return response()->json([
            'success' => true,
            'data' => [
                'user_id' => $user->id,
                'name' => $user->name,
                'xp_points' => $user->xp_points,
                'level' => $user->level,
                'title' => $this->getLevelTitle($user->level),
                'xp_for_current_level' => $currentLevelXP,
                'xp_for_next_level' => $nextLevelXP,
                'progress_percentage' => $this->calculateLevelProgress($user->xp_points, $currentLevelXP, $nextLevelXP)
            ]
        ]);
    }
    
    /**
     * Retorna recompensas do usu√°rio
     */
    public function getUserRewards($id)
    {
        $user = Auth::user();
        
        // Verificar permiss√£o
        if ($user->id != $id && !$user->isAdmin()) {
            return response()->json([
                'success' => false,
                'message' => 'N√£o autorizado'
            ], 403);
        }
        
        $rewards = $user->rewards()->with('reward')->get()->map(function ($userReward) {
            return [
                'id' => $userReward->reward->id,
                'name' => $userReward->reward->name,
                'description' => $userReward->reward->description,
                'type' => $userReward->reward->type,
                'content' => json_decode($userReward->reward->content),
                'unlocked_at' => $userReward->unlocked_at
            ];
        });
        
        return response()->json([
            'success' => true,
            'data' => $rewards
        ]);
    }
    
    /**
     * Calcula o progresso percentual no n√≠vel atual
     */
    private function calculateLevelProgress($currentXP, $currentLevelXP, $nextLevelXP)
    {
        $levelXPRange = $nextLevelXP - $currentLevelXP;
        $userXPInLevel = $currentXP - $currentLevelXP;
        
        if ($levelXPRange <= 0) {
            return 100;
        }
        
        return min(100, max(0, round(($userXPInLevel / $levelXPRange) * 100)));
    }
    
    /**
     * Retorna o t√≠tulo para um n√≠vel espec√≠fico
     */
    private function getLevelTitle($level)
    {
        $titles = [
            1 => 'Novato',
            2 => 'Iniciante',
            3 => 'Aprendiz',
            4 => 'Desenvolvedor',
            5 => 'Desenvolvedor Experiente',
            6 => 'Especialista',
            7 => 'Mestre',
            8 => 'Guru',
            9 => 'Lenda',
            10 => 'Arquiteto'
        ];
        
        return $titles[$level] ?? 'Personalizado';
    }
}
```

## Considera√ß√µes de Acessibilidade

### Adapta√ß√µes para TDAH

1. **Feedback Visual Claro**:
   - Cores vibrantes e contrastantes
   - Anima√ß√µes sutis para refor√ßo positivo
   - Progresso vis√≠vel e quantific√°vel

2. **Redu√ß√£o de Sobrecarga Cognitiva**:
   - Informa√ß√µes apresentadas em pequenos blocos
   - Foco em uma tarefa por vez
   - Elementos visuais simplificados

3. **Recompensas Imediatas**:
   - Feedback instant√¢neo para a√ß√µes
   - Celebra√ß√£o visual de conquistas
   - Notifica√ß√µes claras e diretas

4. **Personaliza√ß√£o**:
   - Ajuste de intensidade visual
   - Op√ß√µes para reduzir anima√ß√µes
   - Configura√ß√£o de notifica√ß√µes

### Suporte a Dislexia

1. **Temas de Alto Contraste**:
   - Op√ß√µes de cores espec√≠ficas para dislexia
   - Ajuste de espa√ßamento entre letras e linhas
   - Fontes otimizadas para leitura

2. **Feedback Multimodal**:
   - Combina√ß√£o de texto, √≠cones e cores
   - Op√ß√£o para feedback sonoro
   - Integra√ß√£o com smartwatch para feedback t√°til

## M√©tricas e An√°lise

### M√©tricas de Engajamento

1. **Reten√ß√£o**:
   - Dias ativos por semana
   - Tempo m√©dio de sess√£o
   - Taxa de retorno ap√≥s inatividade

2. **Progresso**:
   - Velocidade de ganho de XP
   - Distribui√ß√£o de n√≠veis entre usu√°rios
   - Tempo m√©dio para subir de n√≠vel

3. **Comportamento**:
   - Tipos de atividades mais realizadas
   - Hor√°rios de maior produtividade
   - Padr√µes de uso do modo hiperfoco

### Dashboard para Tech Leads

O dashboard para tech leads incluir√°:

1. **Vis√£o Geral da Equipe**:
   - Distribui√ß√£o de n√≠veis
   - XP total da equipe
   - Tend√™ncias de produtividade

2. **An√°lise Individual**:
   - Progresso de cada membro
   - √Åreas de for√ßa e oportunidades
   - Compara√ß√£o com m√©dias da equipe

3. **Configura√ß√µes de Gamifica√ß√£o**:
   - Ajuste de multiplicadores de XP
   - Cria√ß√£o de recompensas personalizadas
   - Defini√ß√£o de desafios espec√≠ficos

## Pr√≥ximos Passos

1. **Implementa√ß√£o**:
   - Desenvolvimento do sistema de XP e n√≠veis
   - Cria√ß√£o das visualiza√ß√µes de progresso
   - Integra√ß√£o com extens√£o VS Code

2. **Testes**:
   - Valida√ß√£o com usu√°rios com TDAH
   - Ajuste de balanceamento de XP
   - Otimiza√ß√£o de feedback visual

3. **Expans√£o**:
   - Adi√ß√£o de conquistas especiais
   - Implementa√ß√£o de desafios di√°rios/semanais
   - Sistema de competi√ß√£o amig√°vel entre equipes
